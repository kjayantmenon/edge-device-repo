// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/AssetRegistry.proto

package assetregistry

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AssetRegistryClient is the client API for AssetRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssetRegistryClient interface {
	GetAllAssets(ctx context.Context, in *NoAssetParams, opts ...grpc.CallOption) (*AssetList, error)
}

type assetRegistryClient struct {
	cc grpc.ClientConnInterface
}

func NewAssetRegistryClient(cc grpc.ClientConnInterface) AssetRegistryClient {
	return &assetRegistryClient{cc}
}

func (c *assetRegistryClient) GetAllAssets(ctx context.Context, in *NoAssetParams, opts ...grpc.CallOption) (*AssetList, error) {
	out := new(AssetList)
	err := c.cc.Invoke(ctx, "/AssetRegistry/GetAllAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssetRegistryServer is the server API for AssetRegistry service.
// All implementations must embed UnimplementedAssetRegistryServer
// for forward compatibility
type AssetRegistryServer interface {
	GetAllAssets(context.Context, *NoAssetParams) (*AssetList, error)
	mustEmbedUnimplementedAssetRegistryServer()
}

// UnimplementedAssetRegistryServer must be embedded to have forward compatible implementations.
type UnimplementedAssetRegistryServer struct {
}

func (UnimplementedAssetRegistryServer) GetAllAssets(context.Context, *NoAssetParams) (*AssetList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAssets not implemented")
}
func (UnimplementedAssetRegistryServer) mustEmbedUnimplementedAssetRegistryServer() {}

// UnsafeAssetRegistryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssetRegistryServer will
// result in compilation errors.
type UnsafeAssetRegistryServer interface {
	mustEmbedUnimplementedAssetRegistryServer()
}

func RegisterAssetRegistryServer(s grpc.ServiceRegistrar, srv AssetRegistryServer) {
	s.RegisterService(&AssetRegistry_ServiceDesc, srv)
}

func _AssetRegistry_GetAllAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoAssetParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetRegistryServer).GetAllAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AssetRegistry/GetAllAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetRegistryServer).GetAllAssets(ctx, req.(*NoAssetParams))
	}
	return interceptor(ctx, in, info, handler)
}

// AssetRegistry_ServiceDesc is the grpc.ServiceDesc for AssetRegistry service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AssetRegistry_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AssetRegistry",
	HandlerType: (*AssetRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllAssets",
			Handler:    _AssetRegistry_GetAllAssets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/AssetRegistry.proto",
}
